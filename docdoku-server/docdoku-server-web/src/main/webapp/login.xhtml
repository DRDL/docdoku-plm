<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:h="http://java.sun.com/jsf/html">

    <f:metadata>
        <f:viewParam name="originURL" value="#{connectionBean.originURL}"/>
    </f:metadata>
    
    <ui:composition template="/WEB-INF/templates/defaultTemplate.xhtml">
        <ui:define name="title">
            <f:loadBundle var="i18nLogin" basename="com.docdoku.server.localization.index_resource"/>
            #{i18nLogin['title']}
        </ui:define>
        <ui:define name="content">
            <div class="well" id="general_presentation">
                <div id="login_form_container">
                        <h3><i class="icon-lock"></i>#{i18nLogin['login.title']}</h3>
                        <h:form id="login_form">
                            <h:inputHidden value="#{connectionBean.originURL}" id="originURL"/>
                            <p>
                                <h:outputLabel value="#{i18nLogin['login.user']}" for="login"/>
                                <h:inputText id="login" value="#{connectionBean.login}" size="20" maxlength="50"/>
                            </p>

                            <p>
                                <h:outputLabel value="#{i18nLogin['login.password']}" for="password"/>
                                <h:inputSecret id="password" value="#{connectionBean.password}" size="20" maxlength="50"/>
                            </p>

                            <p id="login_button_container">
                                <h:commandButton styleClass="btn btn-custom" id="login_button" action="#{connectionBean.logIn}" value="#{i18nLogin['login.title']}" alt="#{i18nLogin['login.title']}"/>
                            </p>

                            <p>
                                <h:link value="#{i18nLogin['login.recovery']}" outcome="/recoveryRequestForm.xhtml"/>
                            </p>
                        </h:form>
                </div>
                <div id="demo-scene"></div>
            </div>
            <div id="detail_presentation">
                <div class="well">
                    <h2>Manage your documents</h2>
                    <h3>You can</h3>
                    <ul>
                        <li>Manage changes with <em>version control</em></li>
                        <li>Add <em>tags</em> and <em>custom attributes</em></li>
                        <li>Create document <em>templates</em></li>
                        <li>Create <em>links</em> between documents</li>
                        <li><em>Organize</em>, <em>browse</em>, <em>search</em> documents</li>
                    </ul>
                    <p>Attach processes, track changes, visualize Office documents inside the browser...</p>
                </div>
                <div class="well">
                    <h2>Manage your products</h2>
                    <h3>You can</h3>
                    <ul>
                        <li>Create and manage <em>products structures</em></li>
                        <li>Manage <em>WBS</em> and <em>bills of materials</em></li>
                        <li>Visualize <em>3D models</em> of your products</li>
                        <li>Define <em>alternate</em> and <em>substitute parts</em></li>
                        <li>List materials upon a <em>specific configuration</em></li>
                    </ul>
                    <p>Track structure and parts changes, manage workflow...</p>
                </div>
                <div class="well">
                    <h2>Track and organize changes</h2>
                    <h3>You can</h3>
                    <ul>
                        <li>Define <em>workflows process</em></li>
                        <li>Manage <em>users</em> and <em>tasks</em></li>
                        <li>Follow the <em>work progress</em></li>
                        <li>Be <em>notified on changes</em></li>
                        <li>Track modifications on <em>every object</em></li>
                    </ul>
                    <p>Process and change management can apply to documents, products, parts...</p>
                </div>
                <div class="well">
                    <h2>Social knowledge management</h2>
                    <h3>You can</h3>
                    <ul>
                        <li>Do <em>realtime comunication</em></li>
                        <li>Chat, audio and <em>video conference</em></li>
                        <li>Create <em>workspaces</em> and <em>user groups</em></li>
                        <li>Synchronize <em>users works</em></li>
                        <li>Share <em>products visualizations</em></li>
                    </ul>
                    <p>Capture chat and visioconference conversations as well as documents and product models.</p>
                </div>
            </div>
            <script type="text/javascript">
                if(window.location.hash){
                    var redirectInput = document.getElementById("login_form:originURL");
                    redirectInput.value=redirectInput.value + window.location.hash;
                }
            </script>
            <script src="js/lib/visualization/Three.js"></script>
            <script src="js/lib/visualization/Detector.js"></script>
            <script src="js/lib/visualization/THREEx.KeyboardState.js"></script>

            <script>

                /* 	Three.js  */

                var info_panel = document.getElementById("demo-scene");
                // MAIN
                if ( ! Detector.webgl ) info_panel.innerHTML = Detector.getWebGLErrorMessage().innerHTML;
                // standard global variables
                var container, scene, camera, renderer, controls, stats;
                var keyboard = new THREEx.KeyboardState();
                var clock = new THREE.Clock();

                // custom global variables
                var model;

                init();
                animate();

                // FUNCTIONS
                function init()
                {
                    // SCENE
                    scene = new THREE.Scene();

                    // CAMERA
                    var SCREEN_WIDTH = 318, SCREEN_HEIGHT = 276;
                    var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
                    camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
                    scene.add(camera);
                    camera.position.set(0,250,200);
                    camera.lookAt(scene.position);

                    // RENDERER
                    renderer = new THREE.WebGLRenderer( {antialias:true} );
                    renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
                    container = document.createElement( 'div' );
                    info_panel.appendChild( container );
                    container.appendChild( renderer.domElement );

                    // CONTROLS
                    controls = new THREE.TrackballControls( camera, info_panel );

                    // LIGHT
                    var light = new THREE.PointLight(0xffffff);
                    light.position.set(-100,200,100);
                    scene.add(light);
                    var light2 = new THREE.PointLight(0xffffff);
                    light2.position.set(100,-200,-100);
                    scene.add(light2);

                    // SKYBOX/FOG
                    scene.fog = new THREE.FogExp2( 0x9999ff, 0.00025 );

                    var binaryLoader = new THREE.BinaryLoader();
                    binaryLoader.load("images/pba.js", addModelToScene)

                    var ambientLight = new THREE.AmbientLight(0x111111);
                    scene.add(ambientLight);

                }

                function addModelToScene( geometry )
                {
                    var material = new THREE.MeshFaceMaterial();
                    model = new THREE.Mesh( geometry, material );
                    model.scale.set(1,1,1);
                    model.position.set(0, 0, 0);
                    model.rotation.set(0.45, 0, 1.55);
                    scene.add( model );
                }

                function animate()
                {
                    requestAnimationFrame( animate );
                    render();
                    update();
                }

                function update()
                {
                    if(model)
                        model.rotation.set(0.45, model.rotation.y+0.005, model.rotation.z+0.005);

                    controls.update();
                }

                function render()
                {
                    renderer.render( scene, camera );
                }

            </script>
        </ui:define>

    </ui:composition>
</html>
